{"version":3,"sources":["drum-machine.js","App.js","serviceWorker.js","index.js"],"names":["bank","keyTrigger","keyCode","id","url","DrumMachine","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","display","currentBank","volume","power","powerOn","updateDisplay","bind","assertThisInitialized","updateVolume","updatePower","name","setState","vol","target","value","_this2","newArr","map","j","i","padArr","react_default","a","createElement","drum_machine_DrumPad","key","className","type","min","max","onChange","onClick","Component","DrumPad","_this3","playAudio","handleKeyPress","document","addEventListener","e","sound","getElementById","newVol","play","src","App","src_drum_machine","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.95d02a7c.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './drum-machine.css';\n\nconst bank = [{\n    keyTrigger: 'Q',\n    keyCode: 81,\n    id: 'heater-1',\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/Heater-1.mp3',\n}, {\n    keyTrigger: 'W',\n    keyCode: 87,\n    id: 'heater-2',\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/Heater-2.mp3'\n}, {\n    keyTrigger: 'E',\n    keyCode: 69,\n    id: 'heater-3',\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/Heater-3.mp3', \n}, {\n    keyTrigger: 'A',\n    keyCode: 65,\n    id: 'heater-4',\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/Heater-4_1.mp3'\n}, {\n    keyTrigger: 'S',\n    keyCode: 83,\n    id: 'heater-6',\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/Heater-6.mp3',\n}, {\n    keyTrigger: 'D',\n    keyCode: 68,\n    id: 'dsc-oh',\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/Dsc_Oh.mp3'\n}, {\n    keyTrigger: 'Z',\n    keyCode: 90,\n    id: 'kick-n-hat',\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/Kick_n_Hat.mp3',\n}, {\n    keyTrigger: 'X',\n    keyCode: 88,\n    id: 'rp4-kick-1',\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/RP4_KICK_1.mp3',\n}, {\n    keyTrigger: 'C',\n    keyCode: 67,\n    id: 'cev-h2',\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/Cev_H2.mp3'\n}]\n\nclass DrumMachine extends Component {\n    constructor(props) {\n       super(props)\n       this.state = {\n           display: \"\",\n           currentBank: bank,    \n           volume: 50,\n           power: true,\n           powerOn: \"On\"\n       }\n       this.updateDisplay = this.updateDisplay.bind(this);\n       this.updateVolume = this.updateVolume.bind(this);\n       this.updatePower = this.updatePower.bind(this);\n       }\n       \n    updateDisplay(name) {\n        this.setState({\n            display: name\n        })\n    }\n\n    updateVolume(vol) {\n        this.setState({\n            volume: vol.target.value\n        })\n    }\n\n    updatePower() {\n        this.setState({\n            power: this.state.power ? false : true,\n            powerOn: this.state.power ? \"Off\" : \"On\"\n        })\n    }\n   \n    render() {\n        let newArr = this.state.currentBank.map((j, i, padArr) => {\n            return (\n                <DrumPad\n                    id={padArr[i].id}\n                    keyTrigger={padArr[i].keyTrigger}\n                    keyCode={padArr[i].keyCode}\n                    url={padArr[i].url}\n                    key={padArr[i].id}\n                    updateDisplay={this.updateDisplay}\n                    power={this.state.power}\n                    volume={this.state.volume}\n                ></DrumPad>\n            )\n        });\n\n        return (\n            <div className=\"container\" id=\"drum-machine\">\n                <h1>Drum Machine</h1>\n                <div>\n                    <p id=\"display\">{this.state.display}</p>\n                    <div className=\"inline\">\n                        <p >Volume: </p>\n                        <input type=\"range\" min=\"1\" max=\"100\" value={this.state.volume} onChange={this.updateVolume}  />\n                        <p>{this.state.volume}</p>\n                    </div>\n                    <div className=\"inline\">\n                        <p>Power: </p>\n                        <div onClick={this.updatePower} id=\"powerButton\"></div>\n                        <p>{this.state.powerOn}</p>\n                    </div>\n                </div>\n                <div id=\"inner\">\n                    {newArr}\n                </div>\n            </div>\n        )  \n    }\n}\n\nclass DrumPad extends Component {\n    constructor(props) {\n        super(props)\n        this.playAudio = this.playAudio.bind(this);\n        this.handleKeyPress = this.handleKeyPress.bind(this);\n    }\n\n    componentDidMount() {\n        document.addEventListener(\"keydown\", this.handleKeyPress)\n    }\n\n    handleKeyPress(e) {\n        if(e.keyCode === this.props.keyCode) {\n            this.playAudio();\n        }\n    }\n\n    playAudio() {\n        const sound = document.getElementById(this.props.keyTrigger);\n        if(this.props.power) {\n            let newVol = this.props.volume / 100;\n            sound.volume = newVol;\n            sound.play();\n            this.props.updateDisplay(this.props.id)\n        }    \n    }\n\n    render() {\n        return (\n            <div onClick={this.playAudio} id={this.props.id} className=\"drum-pad\">\n                <p>{this.props.keyTrigger}</p>\n                <audio className=\"clip\" id={this.props.keyTrigger} src={this.props.url}></audio>\n            </div>\n        )\n    }\n}\nexport default DrumMachine;","import React, { Component } from 'react';\nimport './App.css';\nimport DrumMachine from './drum-machine';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <DrumMachine></DrumMachine>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}